<?php require('_header.php'); ?>

<ul class="toc"></ul>

<h2>Why use FirePHP?</h2>

<p>FirePHP enables the logging of PHP variables to a browser devtools panel.<br/>
As a page loads in the browser the devtools panel
fills with log messages generated by all PHP requests involved in generating the page.</p>

<p>PHP code is instrumented with <a href="/api.php">FirePHP API</a> calls to log variables for ad hoc debugging purposes or to provide general insight accessible all the time.</p>

<p>Follow this guide to see variables logged by this page in your devtools. Then get it working for your own application using the <a href="https://github.com/firephp/firephp-core">FirePHPCore</a> server library.</p>

<p class="highlight">Make sure you read <i>Security Implications</i> and <i>Best Practices</i> below, before using FirePHP.</p>

<h2>Client Extension Setup</h2>

<p>We are going to first inspect some example messages generate by this page.</p>

<ol>
    <li>
        <p><b>Install Browser Extension</b> for your browser from the <a href="/">home</a> page and follow the instructions below.</p>
    </li>
    <li>
        <p><b>Give FirePHP permission</b> to intercept requests for the page in order to get access to request and response headers.</p>

        <p>This permission needs to be granted to every hostname that the extension is used for.</p>

        <ul>
            <li>
                <h3>Firefox</h3>

                <p>Click on the gray FirePHP icon on the right of the address bar. Then click the grant checkbox.</p>

                <p><img class="screenshot" src="/resources/images/quickstart-firefox-give-permission.png" border="0"></p>
            </li>
            <li>
                <h3>Google Chrome</h3>

                <p>Click on the extensions menu and then the FirePHP extension. After, click on new FirePHP icon that just appeared. Then click the grant checkbox.</p>

                <p><img class="screenshot" src="/resources/images/quickstart-chrome-give-permission.png" border="0"></p>
                <p><img class="screenshot" src="/resources/images/quickstart-chrome-give-permission2.png" border="0"></p>
            </li>
        </ul>
    </li>
    <li>
        <p><b>Open Devtools and enable protocol</b> to tell the extension to send the appropriate request headers and look for specific reponse headers.</p>

        <p>Open devtools, click on the FirePHP devtools tab and then click one of the <i>FirePHP (Wildfire based) Protocol</i> checkboxes.</p>

        <p>This will complete the setup for the hostname.</p>

        <p><img class="screenshot small" src="/resources/images/quickstart-devtools-settings.png" border="0"></p>
    </li>
    <li>
        <p><b>Enable logging</b> for this page.</p>

        <p>Click on the <i>Click to Enable</i> button and the browser page should reload.</p>
        <p>If the page does not reload, reload the browser page yourself.</p>

        <p><img class="screenshot" src="/resources/images/quickstart-devtools-enable.png" border="0"></p>
    </li>
    <li>
        <p><b>Inspect logs</b></p>

        <p>You should see log messages generated by the PHP script that generated this page. See blow for how these messages were generated.</p>

        <p>If no log messages show up, reload the browser page again.</p>

        <p><img class="screenshot small" src="/resources/images/quickstart-devtools-logs.png" border="0"></p>
    </li>
</ol>

<h2>Server Library Setup</h2>

<p>Now that the client extension is setup and working for this page, follow the instructions below to get it working for your web application.</p>

<ol>
    <li>
        <p><b>Download/install <a href="https://github.com/firephp/firephp-core">FirePHPCore</a> Server Library</b> from <a href="https://github.com/firephp/firephp-core/releases">github</a> or using <a href="https://packagist.org/packages/firephp/firephp-core">composer</a>.</p>
        <p>The library needs to be accessible from your application source code.</p>
    </li>
    <li>
        <p><b>Include FirePHPCore</b> on any page in your application as a start:</p>
        <pre class="code"><code class="language-php">require('FirePHPCore/fb.php');</code></pre>
    </li>
    <li>
        <p><b>Log a message</b> as the first PHP instruction on the page. It is important that the <b>HTTP response headers have not yet been sent</b>.
        To log variables at any point in your application it is typically necessary to enable output buffering using
        <a href="https://www.php.net/manual/en/function.ob-start.php">ob_start()</a> or the
        <a href="https://www.php.net/manual/en/outcontrol.configuration.php#ini.output-buffering">output_buffering ini directive</a>.</p>
        <pre class="code"><code class="language-php">fb('Hello World');</code></pre>
    </li>
    <li>
        <p><b>Browse to the page</b> you modified on your local development server.</p>
    </li>
    <li>
        <p><b>Give the extension permission</b> to work with your local development server hostname and configure it for the FirePHPCore library. Refer to the <i>Client Extension Setup</i> instructions above as a reference.</p>
    </li>
    <li>
        <p><b>Log more messages</b> and reload the browser page. Ensure the new messages show up in the console.</p>
        <pre class="code"><code class="language-php">fb('Log message'  ,FirePHP::LOG);
fb('Info message' ,FirePHP::INFO);
fb('Warn message' ,FirePHP::WARN);
fb('Error message',FirePHP::ERROR);</code></pre>
        <p>Congratulations! You have just completed the most basic FirePHP integration with your application.</p>
        <p class="highlight">Make sure you read <i>Security Implications</i> and <i>Best Practices</i> below, before using FirePHP.</p>
    </li>
</ol>

<h2>Security Implications</h2>

<blockquote class="warning">Always disable FirePHP in your PHP code when running in production!<br/>Only every allow the logging of FirePHP messages from your PHP code if the user is AUTHORIZED to see them!</blockquote>

<p>When logging messages in PHP using FirePHPCore, the message data is sent to the client using HTTP response headers. As soon as the client extension identifies
itself using a HTTP request header, the server responds with logged data. An attacker could send the request header and receive the data without even running the extension.</p>

<p>Making logged data accessible to third parties is a security risk since variables logged using FirePHPCore may contain sensitive data that could disclose
credentials or other internal information an attacker could use to launch an attack on your application.</p>

<p>When running in production, you have three approaches to safeguard logged data:</p>

<ol>
    <li><b>Disable FirePHPCore</b> using the <code>FB.setEnabled(false)</code> or <code>$firephp.setEnabled(false)</code> API calls. Using this appraoch you can leave all logging calls in place.</li>
    <li><b>Remove FirePHP logging adapter</b> if you are using a logging library such as <a href="https://github.com/Seldaek/monolog">monolog</a> (which supports FirePHP using the <a href="https://github.com/Seldaek/monolog/blob/main/src/Monolog/Handler/FirePHPHandler.php">FirePHPHandler</a>). Using this appraoch you can leave all logging calls in place.</li>
    <li><b>Remove logging calls</b> if you are only using FirePHP for ad hoc debugging during development. Make sure you remove ALL calls. It is much better to use one of the two approaches above as you will likely forget to remove some calls.</li>
</ol>

<p>If you are using a server library other than FirePHPCore the same considerations still apply. Make sure you understand how to only enable logging when you need it.</p>

<h2>Best Practices</h2>

<ul>
    <li><b>Never run FirePHPCore in production</b> unless you understand the <i>Security Implications</i> and have ensured that no logged data will leak to unauthorized users.</li>
    <li><b>Only run FirePHPCore in development</b> and configure it to be automatically disabled in production, unless you spacifically want to use it in production and understand the <i>Security Implications</i>.</li>
    <li><b>If running in production, always disable FirePHPCore by default</b> and only enable it after specific user identification and authorization rules have ensured that the user can have access to the logged data.</li>

    <li><b>Only log the minimal data you need</b> as there is limited space in the HTTP response headers.</li>

</ul>

<h2>API and Server Libraries</h2>

<p>To learn FirePHPCore, see <a href="/api.php">API</a>. FirePHPCore is just one server library that supports the <a href="/protocol.php">FirePHP Protocol</a>.
See <a href="/">Home</a> for a list of server libraries and protocols that the FirePHP client extension is compatible with. More libraries and framework integrations can be found with an internet search.</p>

<h2>Support</h2>

<ul>
    <li><b>FirePHP Client Extension</b> support is available via github issues: <a href="https://github.com/firephp/firephp-for-browser-devtools/issues">github.com/firephp/firephp-for-browser-devtools/issues</a></li>
    <li><b>FirePHPCore Server Library</b> support is available via github issues: <a href="https://github.com/firephp/firephp-core/issues">github.com/firephp/firephp-core/issues</a></li>
</ul>

<?php require('_footer.php'); ?>
